AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  fridge-runner

  Sample SAM Template for fridge-runner

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
  Api:
    Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        #AllowHeaders: "'content-type'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
        AllowOrigin: "'*'"
        #AllowCredentials: "'*'" 

Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
            Cors:  
              AllowOrigin: "'*'"  
              AllowMethods: "'GET,OPTIONS'"  
              AllowHeaders: "'Content-Type'"  

  TestDbAddFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: save_input/  
        Handler: save_input.lambda_handler  
        Runtime: python3.9
        Architectures:
          - x86_64
        Events:
          AddItem:
            Type: Api
            Properties:
              Path: /save-input
              ##Method: post  
              #Path: "/{proxy+}"
              #Proxy path suggested as alternative from StakOv post 
              Method: ANY  
              Cors:
                AllowOrigin: "'*'"
                AllowMethods: "'POST,OPTIONS'"
                AllowHeaders: "'Content-Type'"  

  TestDbGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_test_table/  
      Handler: get_test_table.lambda_handler  
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        AddItem:
          Type: Api
          Properties:
            Path: /get-test-table
            Method: GET  
            Cors:
              AllowOrigin: "'*'"
              AllowMethods: "'POST,OPTIONS'"
              AllowHeaders: "'Content-Type'"             

Outputs:
  #Allows the functions to be exposed via API Gateway and referenced by API Gateway URL.
  #ARN allows cross-service interactions
  #IAM Role ARN for managing permissions 
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn

  TestDbAddApi:
    Description: "API Gateway endpoint URL for Prod stage for TestDbAdd function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/save-input/"
  TestDbAddFunction:
    Description: "TestDbAdd Lambda Function ARN"
    Value: !GetAtt TestDbAddFunction.Arn
  TestDbAddFunctionIamRole:
    Description: "Implicit IAM Role created for TestDbAdd function"
    Value: !GetAtt TestDbAddFunctionRole.Arn

  TestDbGetApi:
    Description: "API Gateway endpoint URL for Prod stage for TestDbGet function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get-test-table/"
  TestDbGetFunction:
    Description: "TestDbGet Lambda Function ARN"
    Value: !GetAtt TestDbGetFunction.Arn
  TestDbGetFunctionIamRole:
    Description: "Implicit IAM Role created for TestDbGet function"
    Value: !GetAtt TestDbGetFunctionRole.Arn
